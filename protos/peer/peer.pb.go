


package peer 

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)


var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf





const _ = proto.ProtoPackageIsVersion2 


var _ context.Context
var _ grpc.ClientConn



const _ = grpc.SupportPackageIsVersion4




type EndorserClient interface {
	ProcessProposal(ctx context.Context, in *SignedProposal, opts ...grpc.CallOption) (*ProposalResponse, error)
}

type endorserClient struct {
	cc *grpc.ClientConn
}

func NewEndorserClient(cc *grpc.ClientConn) EndorserClient {
	return &endorserClient{cc}
}

func (c *endorserClient) ProcessProposal(ctx context.Context, in *SignedProposal, opts ...grpc.CallOption) (*ProposalResponse, error) {
	out := new(ProposalResponse)
	err := c.cc.Invoke(ctx, "/protos.Endorser/ProcessProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}


type EndorserServer interface {
	ProcessProposal(context.Context, *SignedProposal) (*ProposalResponse, error)
}

func RegisterEndorserServer(s *grpc.Server, srv EndorserServer) {
	s.RegisterService(&_Endorser_serviceDesc, srv)
}

func _Endorser_ProcessProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndorserServer).ProcessProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Endorser/ProcessProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndorserServer).ProcessProposal(ctx, req.(*SignedProposal))
	}
	return interceptor(ctx, in, info, handler)
}

var _Endorser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Endorser",
	HandlerType: (*EndorserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessProposal",
			Handler:    _Endorser_ProcessProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer/peer.proto",
}

func init() { proto.RegisterFile("peer/peer.proto", fileDescriptor_peer_ce29881c0e113053) }

var fileDescriptor_peer_ce29881c0e113053 = []byte{
	
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x3d, 0x0b, 0xc2, 0x30,
	0x10, 0x86, 0x9d, 0x44, 0xb2, 0x14, 0x2a, 0x88, 0x14, 0xa7, 0x6e, 0x2e, 0x09, 0xe8, 0x3f, 0x10,
	0x3a, 0x5b, 0x75, 0x73, 0x91, 0x7e, 0x9c, 0x69, 0xa0, 0xe6, 0xc2, 0x5d, 0x1d, 0xfc, 0xf7, 0xd2,
	0x5e, 0x03, 0xba, 0x24, 0xf0, 0xbc, 0xcf, 0x1d, 0xf7, 0xaa, 0x24, 0x00, 0x90, 0x19, 0x1f, 0x1d,
	0x08, 0x07, 0x4c, 0x97, 0xd3, 0xc7, 0xd9, 0x5a, 0x02, 0xc2, 0x80, 0x5c, 0xf5, 0x12, 0x66, 0xbb,
	0x3f, 0xf8, 0x20, 0xe0, 0x80, 0x9e, 0x41, 0xd2, 0xc3, 0x45, 0xad, 0x0a, 0xdf, 0x22, 0x31, 0x50,
	0x5a, 0xa8, 0xa4, 0x24, 0x6c, 0x80, 0xb9, 0x9c, 0xed, 0x74, 0x23, 0x1a, 0xeb, 0x9b, 0xb3, 0x1e,
	0xda, 0xc8, 0xb3, 0x6d, 0xe4, 0x91, 0x5c, 0xe7, 0xb5, 0xf9, 0xe2, 0x74, 0x56, 0x39, 0x92, 0xd5,
	0xdd, 0x27, 0x00, 0xf5, 0xd0, 0x5a, 0x20, 0xfd, 0xac, 0x6a, 0x72, 0x4d, 0x9c, 0x19, 0x0f, 0xba,
	0xef, 0xad, 0x1b, 0xba, 0x77, 0xad, 0x1b, 0x7c, 0x99, 0x1f, 0xd5, 0x88, 0x6a, 0x44, 0x9d, 0x4a,
	0xd6, 0x52, 0xef, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x8b, 0x31, 0x1f, 0xf8, 0x00, 0x00,
	0x00,
}
